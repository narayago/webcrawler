package com.monzo.service.impl;

import com.monzo.exception.WebCrawlException;
import com.monzo.model.WebPage;
import com.monzo.model.WebCrawlRequest;
import com.monzo.service.WebCrawlerService;
import com.monzo.task.WebCrawlerManager;
import io.micrometer.core.annotation.Timed;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

/**
 * Web page crawler service.
 *
 * @author Gowrisankar Narayana
 */
@Service
public class WebCrawlerServiceImpl implements WebCrawlerService {

    private static final Logger LOG= LoggerFactory.getLogger(WebCrawlerServiceImpl.class);

    /**
     * Crawls website and prints sitemap
     *
     * @param pageCrawlRequest Web page crawler request
     */
    @Override
    @Timed(value = "monzo.service.crawler.generateSitemap",description = "Sitemap Generated by Web Crawler Service")
    public void generateSitemap(final WebCrawlRequest pageCrawlRequest) throws WebCrawlException {

        try {

            LOG.info("Begin crawler request {}", pageCrawlRequest);

            WebCrawlerManager manager = new WebCrawlerManager(pageCrawlRequest);

            manager.crawl();

            printTree(pageCrawlRequest.getPage(), "-");

        }catch (Exception e){
            LOG.error("sitemap generation error {}",e.getMessage(),e);
            throw new WebCrawlException(e.getMessage());
        }

    }

    /**
     * Prints sitemap to console
     *
     * @param page Root web page
     * @param appender Spacing character for formatting
     */
    private void printTree(final WebPage page, String appender) {

        if (!StringUtils.isEmpty(page.getUrl())) {
            System.out.println(appender + page.getUrl());
        }

        for (WebPage each : page.getChildren()) {
            printTree(each, appender + appender);
        }
    }

}